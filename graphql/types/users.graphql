directive @auth(role: String!) on FIELD_DEFINITION

# Main Query Type
type Query {
  currentUser: User # Fetch the currently logged-in user
  userPlayers: [Player!]! # Fetch players associated with the current user
  users: [User!]! @auth(role: "researcher") # Fetch all users (admin only)
  worlds: [World!]! @auth(role: "researcher")
}

# Admin-Level Mutations
type Mutation {
  createPlayer(playerName: String!, worldId: ID!): Player! # Create a new player linked to the current user
  linkPlayerWithUser(playerId: ID!, userId: ID!): UserPlayerAssociation # Link a player with the current user
  inviteUserToWorld(input: InviteUserToWorldInput!): UserWorldAccess # @auth(role: "researcher")
  removeUserFromWorld(input: RemoveUserFromWorldInput!): Boolean # @auth(role: "researcher")
  updateUserRole(input: UpdateUserRoleInput!): UserRole # @auth(role: "researcher")
}

# Input Types for Mutations
input InviteUserToWorldInput {
  userId: ID!
  worldId: ID!
}

input RemoveUserFromWorldInput {
  userId: ID!
  worldId: ID!
}

input UpdateUserRoleInput {
  userId: ID!
  roleId: ID!
}

# Type Definitions
type User {
  id: ID!
  email: String!
  name: String!
  avatar_url: String
  roles: [Role!]!
  players: [Player!]!
  worlds: [World!]!
}

type Role {
  id: ID!
  name: String!
}

type World {
  id: ID!
  name: String!
  players: [Player!]!
}

type Player {
  id: ID!
  name: String!
  world: World!
  user: User
}

type UserPlayerAssociation {
  player_id: ID!
  user_id: ID!
}

type UserWorldAccess {
  user_id: ID!
  world_id: ID!
  user: User!
  world: World!
}

type UserRole {
  user: User!
  role: Role!
}